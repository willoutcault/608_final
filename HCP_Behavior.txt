require(dplyr)
require(curl)
require(tidyr)
require(stringr)
require(rvest)
require(shiny)
require(ggplot2)
require(shinydashboard)
require(DT)
require(scales)
require(shinycssloaders)
require(plotly)
require(doSNOW)
require(foreach)
require(lubridate)  # Added for date manipulation


# Load data
eng_df <- read.csv('https://raw.githubusercontent.com/willoutcault/608_final/refs/heads/master/HCP_Engagement_Test.csv', TRUE, ",")
met_df <- read.csv('https://raw.githubusercontent.com/willoutcault/608_final/refs/heads/master/HCP_Metadata_Test.csv', TRUE, ",")

# Generate month labels (e.g., "Jan 2023") for the past 12 months
months_labels <- format(seq(from = Sys.Date(), by = "-1 month", length.out = 12), "%b %Y")

# Adjust Title for P2P data_source
eng_df <- eng_df %>%
  mutate(
    title = ifelse(data_source == "P2P", variable, title)
  )

eng_df <- eng_df %>% 
  rename(
    Brand = brand,
    Pharma = pharma,
    Title = title
  )

met_df <- met_df %>%
  mutate(
    Name = paste(str_to_title(firstname), str_to_title(lastname)),
    address = str_to_title(address),
    city = str_to_title(city)
  )

met_df <- met_df %>% 
  select(npi, Name, specialty, sub_specialty, address, city, state) %>% 
  rename(
    NPI = npi,
    Name = Name,
    Specialty = specialty,
    Sub_Specialty = sub_specialty,
    Address = address,
    City = city,
    State = state
  )

header <- dashboardHeader(
  title = "Data Warehouse"
)

body <- dashboardBody(
  includeCSS("https://raw.githubusercontent.com/willoutcault/608_final/master/styles.css"),
  tags$head(
    tags$style(HTML("
      /* Ensuring consistent box width and margin */
      .box-custom {
        margin: 0 auto;
        width: 100%;
      }
    "))
  ),
  fluidRow(
    column(width = 9,
           conditionalPanel(
             condition = "input.go1 > 0 && input.npi != ''",  # Display only if "Search" is clicked and NPI is entered
             box(width = 12, solidHeader = TRUE, class = "box-custom",  # Apply custom class for consistent width
                 # Tabs for each plot
                 tabsetPanel(
                   tabPanel("Top Titles",
                            plotlyOutput("plot1_1", height = "250px")  # Plot 1 with plotly for interactivity
                   ),
                   tabPanel("Engagement by Brand",
                            plotlyOutput("plot1_2", height = "250px")  # Plot 2 with plotly for interactivity
                   ),
                   tabPanel("Engagement Over Time",
                            plotlyOutput("plot1_3", height = "250px")  # Plot 3 with plotly for interactivity
                   )
                 )
             )
           ),
           box(width = 12, title = "Activity Feed", solidHeader = TRUE, class = "box-custom",  # Match width with custom class
               DT::dataTableOutput("activityFeedTable")
           )
    ),
    column(width = 3,
           box(width = NULL, status = "warning",
               textInput("npi", label = "NPI:", placeholder = "Enter NPI"),
               sliderInput("months", "Select Time Period (Months):", min = 1, max = 12, value = 3, step = 1),  # Moved slider under NPI input
               actionButton("go1", "Search")  # Search button to trigger updates
           ),
           box(width = NULL, title = "Metadata", solidHeader = TRUE,
               uiOutput("metadata")  # Dynamic metadata display
           ),
           box(width = NULL, title = "Engagement Summary", solidHeader = TRUE,  # New box for engagement summary
               uiOutput("engagement_summary")  # Display the summary
           )
    )
  )
)

ui <- dashboardPage(
  dashboardHeader(title = "Data Warehouse"),
  dashboardSidebar(disable = TRUE),
  body
)

# Server function
server <- function(input, output) {
  
  # Reactive value to hold filtered data for activity feed and metadata based on NPI and months slider
  data_to_display <- reactiveVal(eng_df)  # Initially set to the full dataset
  
  # Reactive value to hold metadata for the queried NPI
  selected_metadata <- reactiveVal(NULL)  # Initially empty
  
  # Reactive value to hold filtered plot data, updated only on search
  plot_data <- reactiveVal(eng_df)  # Initially set to the full dataset
  
  # Update data based on NPI and slider when "Search" is clicked
  observeEvent(input$go1, {
    start_date <- Sys.Date() %m-% months(input$months)  # Calculate start date based on slider
    
    # Filter data based on the selected time period and NPI
    filtered_data <- eng_df %>%
      filter(as.Date(date) >= start_date)  # Filter by selected months
    
    # Further filter by NPI if entered
    if (input$npi != "") {
      filtered_data <- filtered_data %>%
        filter(grepl(as.character(input$npi), as.character(NPI), ignore.case = TRUE))
    }
    
    # Update data for activity feed, metadata, and plots
    data_to_display(filtered_data)
    selected_metadata(met_df %>% filter(NPI == input$npi))
    plot_data(filtered_data %>% filter(data_source != "P2P"))  # Exclude "P2P" engagement type for plots
  })
  
  # Render the Activity Feed table with selected columns and sort by date
  output$activityFeedTable <- renderDataTable({
    data <- data_to_display() %>%
      select(Date = date, NPI, Engagement_Type = data_source, Title, Brand, Pharma) %>%
      arrange(desc(Date))
    
    datatable(data, options = list(
      paging = TRUE,
      scrollY = "300px",
      searching = FALSE,
      lengthChange = FALSE
    ))
  })
  
  # Render the Metadata section for the queried NPI
  output$metadata <- renderUI({
    metadata <- selected_metadata()
    if (is.null(metadata) || nrow(metadata) == 0) {
      return("No metadata available for the entered NPI.")
    } else {
      tagList(
        p(strong("NPI:"), metadata$NPI),
        p(strong("Name:"), metadata$Name),
        p(strong("Specialty:"), metadata$Specialty),
        p(strong("Sub-Specialty:"), metadata$Sub_Specialty),
        p(strong("Address:"), metadata$Address),
        p(strong("City:"), metadata$City),
        p(strong("State:"), metadata$State)
      )
    }
  })
  
  # Render the Engagement Summary for the queried NPI
  output$engagement_summary <- renderUI({
    summary_data <- data_to_display()
    
    if (nrow(summary_data) == 0) {
      return("No engagement data available.")
    } else {
      total_engagements <- nrow(summary_data)
      unique_brands <- length(unique(summary_data$Brand))
      top_engagement_type <- summary_data %>%
        count(data_source) %>%
        arrange(desc(n)) %>%
        slice(1) %>%
        pull(data_source)
      
      tagList(
        p(strong("Total Engagements:"), total_engagements),
        p(strong("Unique Brands Engaged:"), unique_brands),
        p(strong("Most Frequent Engagement Type:"), top_engagement_type)
      )
    }
  })
  
  # Plot 1: Top 10 Titles by Engagement Count
  output$plot1_1 <- renderPlotly({
    req(input$go1)  # Ensure "Search" has been clicked before rendering
    
    top_titles <- plot_data() %>%
      count(Title, sort = TRUE) %>%
      top_n(10, n)
    
    p1 <- ggplot(top_titles, aes(x = reorder(Title, n), y = n)) +
      geom_bar(stat = 'identity', fill = "lightblue", color = "darkblue") +
      coord_flip() +
      labs(title = "Top 10 Titles by Engagement Count", x = "Title", y = "Engagement Count") +
      theme_minimal() +
      theme(
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)
      )
    
    ggplotly(p1)  # Convert to plotly for interactivity
  })
  
  # Plot 2: Distribution of Engagement Counts by Brand
  output$plot1_2 <- renderPlotly({
    req(input$go1)  # Ensure "Search" has been clicked before rendering
    
    brand_counts <- plot_data() %>%
      count(Brand, sort = TRUE)
    
    p2 <- ggplot(brand_counts, aes(x = reorder(Brand, n), y = n)) +
      geom_bar(stat = 'identity', fill = "salmon", color = "darkred") +
      coord_flip() +
      labs(title = "Engagement Counts by Brand", x = "Brand", y = "Engagement Count") +
      theme_minimal() +
      theme(
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10)
      )
    
    ggplotly(p2)  # Convert to plotly for interactivity
  })
  
  # Plot 3: Engagement Counts Over Time
  output$plot1_3 <- renderPlotly({
    req(input$go1)  # Ensure "Search" has been clicked before rendering
    
    engagements_over_time <- plot_data() %>%
      count(Date = as.Date(date))
    
    p3 <- ggplot(engagements_over_time, aes(x = Date, y = n)) +
      geom_line(color = "darkgreen") +
      geom_point(color = "lightgreen") +
      labs(title = "Engagement Counts Over Time", x = "Date", y = "Engagement Count") +
      theme_minimal() +
      theme(
        axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
        axis.text.y = element_text(size = 10)
      )
    
    ggplotly(p3)  # Convert to plotly for interactivity
  })
}

shinyApp(ui = ui, server = server)
